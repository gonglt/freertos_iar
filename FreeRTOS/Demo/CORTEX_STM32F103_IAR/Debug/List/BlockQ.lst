###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       14/May/2018  20:56:15
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\Common\Minimal\BlockQ.c
#    Command line =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\Common\Minimal\BlockQ.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\BlockQ.lst
#    Object file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\BlockQ.o
#
###############################################################################

C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\Common\Minimal\BlockQ.c
      1          /*
      2           * FreeRTOS Kernel V10.0.1
      3           * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /*
     29           * Creates six tasks that operate on three queues as follows:
     30           *
     31           * The first two tasks send and receive an incrementing number to/from a queue.
     32           * One task acts as a producer and the other as the consumer.  The consumer is a
     33           * higher priority than the producer and is set to block on queue reads.  The queue
     34           * only has space for one item - as soon as the producer posts a message on the
     35           * queue the consumer will unblock, pre-empt the producer, and remove the item.
     36           *
     37           * The second two tasks work the other way around.  Again the queue used only has
     38           * enough space for one item.  This time the consumer has a lower priority than the
     39           * producer.  The producer will try to post on the queue blocking when the queue is
     40           * full.  When the consumer wakes it will remove the item from the queue, causing
     41           * the producer to unblock, pre-empt the consumer, and immediately re-fill the
     42           * queue.
     43           *
     44           * The last two tasks use the same queue producer and consumer functions.  This time the queue has
     45           * enough space for lots of items and the tasks operate at the same priority.  The
     46           * producer will execute, placing items into the queue.  The consumer will start
     47           * executing when either the queue becomes full (causing the producer to block) or
     48           * a context switch occurs (tasks of the same priority will time slice).
     49           *
     50           */
     51          
     52          #include <stdlib.h>
     53          
     54          /* Scheduler include files. */
     55          #include "FreeRTOS.h"
     56          #include "task.h"
     57          #include "queue.h"
     58          
     59          /* Demo program include files. */
     60          #include "BlockQ.h"
     61          
     62          #define blckqSTACK_SIZE		configMINIMAL_STACK_SIZE
     63          #define blckqNUM_TASK_SETS	( 3 )
     64          
     65          #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
     66          	#error This example cannot be used if dynamic allocation is not allowed.
     67          #endif
     68          
     69          /* Structure used to pass parameters to the blocking queue tasks. */
     70          typedef struct BLOCKING_QUEUE_PARAMETERS
     71          {
     72          	QueueHandle_t xQueue;					/*< The queue to be used by the task. */
     73          	TickType_t xBlockTime;				/*< The block time to use on queue reads/writes. */
     74          	volatile short *psCheckVariable;	/*< Incremented on each successful cycle to check the task is still running. */
     75          } xBlockingQueueParameters;
     76          
     77          /* Task function that creates an incrementing number and posts it on a queue. */
     78          static portTASK_FUNCTION_PROTO( vBlockingQueueProducer, pvParameters );
     79          
     80          /* Task function that removes the incrementing number from a queue and checks that
     81          it is the expected number. */
     82          static portTASK_FUNCTION_PROTO( vBlockingQueueConsumer, pvParameters );
     83          
     84          /* Variables which are incremented each time an item is removed from a queue, and
     85          found to be the expected value.
     86          These are used to check that the tasks are still running. */
     87          static volatile short sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
     88          
     89          /* Variable which are incremented each time an item is posted on a queue.   These
     90          are used to check that the tasks are still running. */
     91          static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
     92          
     93          /*-----------------------------------------------------------*/
     94          
     95          void vStartBlockingQueueTasks( UBaseType_t uxPriority )
     96          {
     97          xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
     98          xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
     99          xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
    100          const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
    101          const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
    102          const TickType_t xDontBlock = ( TickType_t ) 0;
    103          
    104          	/* Create the first two tasks as described at the top of the file. */
    105          
    106          	/* First create the structure used to pass parameters to the consumer tasks. */
    107          	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    108          
    109          	/* Create the queue used by the first two tasks to pass the incrementing number.
    110          	Pass a pointer to the queue in the parameter structure. */
    111          	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
    112          
    113          	/* The consumer is created first so gets a block time as described above. */
    114          	pxQueueParameters1->xBlockTime = xBlockTime;
    115          
    116          	/* Pass in the variable that this task is going to increment so we can check it
    117          	is still running. */
    118          	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    119          
    120          	/* Create the structure used to pass parameters to the producer task. */
    121          	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    122          
    123          	/* Pass the queue to this task also, using the parameter structure. */
    124          	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
    125          
    126          	/* The producer is not going to block - as soon as it posts the consumer will
    127          	wake and remove the item so the producer should always have room to post. */
    128          	pxQueueParameters2->xBlockTime = xDontBlock;
    129          
    130          	/* Pass in the variable that this task is going to increment so we can check
    131          	it is still running. */
    132          	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
    133          
    134          
    135          	/* Note the producer has a lower priority than the consumer when the tasks are
    136          	spawned. */
    137          	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    138          	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
    139          
    140          
    141          
    142          	/* Create the second two tasks as described at the top of the file.   This uses
    143          	the same mechanism but reverses the task priorities. */
    144          
    145          	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    146          	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
    147          	pxQueueParameters3->xBlockTime = xDontBlock;
    148          	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
    149          
    150          	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    151          	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
    152          	pxQueueParameters4->xBlockTime = xBlockTime;
    153          	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    154          
    155          	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
    156          	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
    157          
    158          
    159          
    160          	/* Create the last two tasks as described above.  The mechanism is again just
    161          	the same.  This time both parameter structures are given a block time. */
    162          	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    163          	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
    164          	pxQueueParameters5->xBlockTime = xBlockTime;
    165          	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
    166          
    167          	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    168          	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
    169          	pxQueueParameters6->xBlockTime = xBlockTime;
    170          	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
    171          
    172          	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
    173          	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
    174          }
    175          /*-----------------------------------------------------------*/
    176          
    177          static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
    178          {
    179          uint16_t usValue = 0;
    180          xBlockingQueueParameters *pxQueueParameters;
    181          short sErrorEverOccurred = pdFALSE;
    182          
    183          	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
    184          
    185          	for( ;; )
    186          	{
    187          		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
    188          		{
    189          			sErrorEverOccurred = pdTRUE;
    190          		}
    191          		else
    192          		{
    193          			/* We have successfully posted a message, so increment the variable
    194          			used to check we are still running. */
    195          			if( sErrorEverOccurred == pdFALSE )
    196          			{
    197          				( *pxQueueParameters->psCheckVariable )++;
    198          			}
    199          
    200          			/* Increment the variable we are going to post next time round.  The
    201          			consumer will expect the numbers to	follow in numerical order. */
    202          			++usValue;
    203          
    204          			#if configUSE_PREEMPTION == 0
    205          				taskYIELD();
    206          			#endif
    207          		}
    208          	}
    209          }
    210          /*-----------------------------------------------------------*/
    211          
    212          static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
    213          {
    214          uint16_t usData, usExpectedValue = 0;
    215          xBlockingQueueParameters *pxQueueParameters;
    216          short sErrorEverOccurred = pdFALSE;
    217          
    218          	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
    219          
    220          	for( ;; )
    221          	{
    222          		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
    223          		{
    224          			if( usData != usExpectedValue )
    225          			{
    226          				/* Catch-up. */
    227          				usExpectedValue = usData;
    228          
    229          				sErrorEverOccurred = pdTRUE;
    230          			}
    231          			else
    232          			{
    233          				/* We have successfully received a message, so increment the
    234          				variable used to check we are still running. */
    235          				if( sErrorEverOccurred == pdFALSE )
    236          				{
    237          					( *pxQueueParameters->psCheckVariable )++;
    238          				}
    239          
    240          				/* Increment the value we expect to remove from the queue next time
    241          				round. */
    242          				++usExpectedValue;
    243          			}
    244          
    245          			#if configUSE_PREEMPTION == 0
    246          			{
    247          				if( pxQueueParameters->xBlockTime == 0 )
    248          				{
    249          					taskYIELD();
    250          				}
    251          			}
    252          			#endif
    253          		}
    254          	}
    255          }
    256          /*-----------------------------------------------------------*/
    257          
    258          /* This is called to check that all the created tasks are still running. */
    259          BaseType_t xAreBlockingQueuesStillRunning( void )
    260          {
    261          static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
    262          static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
    263          BaseType_t xReturn = pdPASS, xTasks;
    264          
    265          	/* Not too worried about mutual exclusion on these variables as they are 16
    266          	bits and we are only reading them. We also only care to see if they have
    267          	changed or not.
    268          
    269          	Loop through each check variable to and return pdFALSE if any are found not
    270          	to have changed since the last call. */
    271          
    272          	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
    273          	{
    274          		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    275          		{
    276          			xReturn = pdFALSE;
    277          		}
    278          		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    279          
    280          
    281          		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    282          		{
    283          			xReturn = pdFALSE;
    284          		}
    285          		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    286          	}
    287          
    288          	return xReturn;
    289          }
    290          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   vBlockingQueueConsumer
        24   -> xQueueReceive
      16   vBlockingQueueProducer
        16   -> xQueueGenericSend
      40   vStartBlockingQueueTasks
        40   -> pvPortMalloc
        40   -> xQueueGenericCreate
        40   -> xTaskCreate
       0   xAreBlockingQueuesStillRunning


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
       8  ?_4
       8  ?_5
       8  sBlockingConsumerCount
       8  sBlockingProducerCount
       8  sLastBlockingConsumerCount
       8  sLastBlockingProducerCount
      64  vBlockingQueueConsumer
      60  vBlockingQueueProducer
     304  vStartBlockingQueueTasks
      74  xAreBlockingQueuesStillRunning

 
  32 bytes in section .bss
  48 bytes in section .rodata
 558 bytes in section .text
 
 558 bytes of CODE  memory
  48 bytes of CONST memory
  32 bytes of DATA  memory

Errors: none
Warnings: none
