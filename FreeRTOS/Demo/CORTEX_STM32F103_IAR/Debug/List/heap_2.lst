###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       14/May/2018  20:56:15
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Source\portable\MemMang\heap_2.c
#    Command line =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Source\portable\MemMang\heap_2.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\heap_2.lst
#    Object file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\heap_2.o
#
###############################################################################

C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Source\portable\MemMang\heap_2.c
      1          /*
      2           * FreeRTOS Kernel V10.0.1
      3           * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /*
     29           * A sample implementation of pvPortMalloc() and vPortFree() that permits
     30           * allocated blocks to be freed, but does not combine adjacent free blocks
     31           * into a single larger block (and so will fragment memory).  See heap_4.c for
     32           * an equivalent that does combine adjacent blocks into single larger blocks.
     33           *
     34           * See heap_1.c, heap_3.c and heap_4.c for alternative implementations, and the
     35           * memory management pages of http://www.FreeRTOS.org for more information.
     36           */
     37          #include <stdlib.h>
     38          
     39          /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
     40          all the API functions to use the MPU wrappers.  That should only be done when
     41          task.h is included from an application file. */
     42          #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     43          
     44          #include "FreeRTOS.h"
     45          #include "task.h"
     46          
     47          #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     48          
     49          #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
     50          	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
     51          #endif
     52          
     53          /* A few bytes might be lost to byte aligning the heap start address. */
     54          #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
     55          
     56          /*
     57           * Initialises the heap structures before their first use.
     58           */
     59          static void prvHeapInit( void );
     60          
     61          /* Allocate the memory for the heap. */
     62          #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
     63          	/* The application writer has already defined the array used for the RTOS
     64          	heap - probably so it can be placed in a special segment or address. */
     65          	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
     66          #else
     67          	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
     68          #endif /* configAPPLICATION_ALLOCATED_HEAP */
     69          
     70          
     71          /* Define the linked list structure.  This is used to link free blocks in order
     72          of their size. */
     73          typedef struct A_BLOCK_LINK
     74          {
     75          	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
     76          	size_t xBlockSize;						/*<< The size of the free block. */
     77          } BlockLink_t;
     78          
     79          
     80          static const uint16_t heapSTRUCT_SIZE	= ( ( sizeof ( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) ) & ~portBYTE_ALIGNMENT_MASK );
     81          #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
     82          
     83          /* Create a couple of list links to mark the start and end of the list. */
     84          static BlockLink_t xStart, xEnd;
     85          
     86          /* Keeps track of the number of free bytes remaining, but says nothing about
     87          fragmentation. */
     88          static size_t xFreeBytesRemaining = configADJUSTED_HEAP_SIZE;
     89          
     90          /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
     91          
     92          /*
     93           * Insert a block into the list of free blocks - which is ordered by size of
     94           * the block.  Small blocks at the start of the list and large blocks at the end
     95           * of the list.
     96           */
     97          #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
     98          {																					\
     99          BlockLink_t *pxIterator;															\
    100          size_t xBlockSize;																	\
    101          																					\
    102          	xBlockSize = pxBlockToInsert->xBlockSize;										\
    103          																					\
    104          	/* Iterate through the list until a block is found that has a larger size */	\
    105          	/* than the block we are inserting. */											\
    106          	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIterator->pxNextFreeBlock )	\
    107          	{																				\
    108          		/* There is nothing to do here - just iterate to the correct position. */	\
    109          	}																				\
    110          																					\
    111          	/* Update the list to include the block being inserted in the correct */		\
    112          	/* position. */																	\
    113          	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
    114          	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
    115          }
    116          /*-----------------------------------------------------------*/
    117          
    118          void *pvPortMalloc( size_t xWantedSize )
    119          {
    120          BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
    121          static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    122          void *pvReturn = NULL;
    123          
    124          	vTaskSuspendAll();
    125          	{
    126          		/* If this is the first call to malloc then the heap will require
    127          		initialisation to setup the list of free blocks. */
    128          		if( xHeapHasBeenInitialised == pdFALSE )
    129          		{
    130          			prvHeapInit();
    131          			xHeapHasBeenInitialised = pdTRUE;
    132          		}
    133          
    134          		/* The wanted size is increased so it can contain a BlockLink_t
    135          		structure in addition to the requested amount of bytes. */
    136          		if( xWantedSize > 0 )
    137          		{
    138          			xWantedSize += heapSTRUCT_SIZE;
    139          
    140          			/* Ensure that blocks are always aligned to the required number of bytes. */
    141          			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    142          			{
    143          				/* Byte alignment required. */
    144          				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    145          			}
    146          		}
    147          
    148          		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    149          		{
    150          			/* Blocks are stored in byte order - traverse the list from the start
    151          			(smallest) block until one of adequate size is found. */
    152          			pxPreviousBlock = &xStart;
    153          			pxBlock = xStart.pxNextFreeBlock;
    154          			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    155          			{
    156          				pxPreviousBlock = pxBlock;
    157          				pxBlock = pxBlock->pxNextFreeBlock;
    158          			}
    159          
    160          			/* If we found the end marker then a block of adequate size was not found. */
    161          			if( pxBlock != &xEnd )
    162          			{
    163          				/* Return the memory space - jumping over the BlockLink_t structure
    164          				at its start. */
    165          				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    166          
    167          				/* This block is being returned for use so must be taken out of the
    168          				list of free blocks. */
    169          				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    170          
    171          				/* If the block is larger than required it can be split into two. */
    172          				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    173          				{
    174          					/* This block is to be split into two.  Create a new block
    175          					following the number of bytes requested. The void cast is
    176          					used to prevent byte alignment warnings from the compiler. */
    177          					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    178          
    179          					/* Calculate the sizes of two blocks split from the single
    180          					block. */
    181          					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    182          					pxBlock->xBlockSize = xWantedSize;
    183          
    184          					/* Insert the new block into the list of free blocks. */
    185          					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    186          				}
    187          
    188          				xFreeBytesRemaining -= pxBlock->xBlockSize;
    189          			}
    190          		}
    191          
    192          		traceMALLOC( pvReturn, xWantedSize );
    193          	}
    194          	( void ) xTaskResumeAll();
    195          
    196          	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
    197          	{
    198          		if( pvReturn == NULL )
    199          		{
    200          			extern void vApplicationMallocFailedHook( void );
    201          			vApplicationMallocFailedHook();
    202          		}
    203          	}
    204          	#endif
    205          
    206          	return pvReturn;
    207          }
    208          /*-----------------------------------------------------------*/
    209          
    210          void vPortFree( void *pv )
    211          {
    212          uint8_t *puc = ( uint8_t * ) pv;
    213          BlockLink_t *pxLink;
    214          
    215          	if( pv != NULL )
    216          	{
    217          		/* The memory being freed will have an BlockLink_t structure immediately
    218          		before it. */
    219          		puc -= heapSTRUCT_SIZE;
    220          
    221          		/* This unexpected casting is to keep some compilers from issuing
    222          		byte alignment warnings. */
    223          		pxLink = ( void * ) puc;
    224          
    225          		vTaskSuspendAll();
    226          		{
    227          			/* Add this block to the list of free blocks. */
    228          			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    229          			xFreeBytesRemaining += pxLink->xBlockSize;
    230          			traceFREE( pv, pxLink->xBlockSize );
    231          		}
    232          		( void ) xTaskResumeAll();
    233          	}
    234          }
    235          /*-----------------------------------------------------------*/
    236          
    237          size_t xPortGetFreeHeapSize( void )
    238          {
    239          	return xFreeBytesRemaining;
    240          }
    241          /*-----------------------------------------------------------*/
    242          
    243          void vPortInitialiseBlocks( void )
    244          {
    245          	/* This just exists to keep the linker quiet. */
    246          }
    247          /*-----------------------------------------------------------*/
    248          
    249          static void prvHeapInit( void )
    250          {
    251          BlockLink_t *pxFirstFreeBlock;
    252          uint8_t *pucAlignedHeap;
    253          
    254          	/* Ensure the heap starts on a correctly aligned boundary. */
    255          	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    256          
    257          	/* xStart is used to hold a pointer to the first item in the list of free
    258          	blocks.  The void cast is used to prevent compiler warnings. */
    259          	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    260          	xStart.xBlockSize = ( size_t ) 0;
    261          
    262          	/* xEnd is used to mark the end of the list of free blocks. */
    263          	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    264          	xEnd.pxNextFreeBlock = NULL;
    265          
    266          	/* To start with there is a single free block that is sized to take up the
    267          	entire heap space. */
    268          	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    269          	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    270          	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    271          }
    272          /*-----------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   prvHeapInit
      16   pvPortMalloc
        16   -> prvHeapInit
        16   -> vTaskSuspendAll
        16   -> xTaskResumeAll
       8   vPortFree
         8   -> vTaskSuspendAll
         8   -> xTaskResumeAll
       0   vPortInitialiseBlocks
       0   xPortGetFreeHeapSize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       2  heapSTRUCT_SIZE
      42  prvHeapInit
     178  pvPortMalloc
   17408  ucHeap
      60  vPortFree
       2  vPortInitialiseBlocks
       8  xEnd
       4  xFreeBytesRemaining
       4  xHeapHasBeenInitialised
       6  xPortGetFreeHeapSize
       8  xStart

 
 17 428 bytes in section .bss
      4 bytes in section .data
      2 bytes in section .rodata
    312 bytes in section .text
 
    312 bytes of CODE  memory
      2 bytes of CONST memory
 17 432 bytes of DATA  memory

Errors: none
Warnings: none
