###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       14/May/2018  20:56:15
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\Common\Minimal\flash.c
#    Command line =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\Common\Minimal\flash.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\flash.lst
#    Object file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\flash.o
#
###############################################################################

C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\Common\Minimal\flash.c
      1          /*
      2           * FreeRTOS Kernel V10.0.1
      3           * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /**
     29           * This version of flash .c is for use on systems that have limited stack space
     30           * and no display facilities.  The complete version can be found in the
     31           * Demo/Common/Full directory.
     32           *
     33           * Three tasks are created, each of which flash an LED at a different rate.  The first
     34           * LED flashes every 200ms, the second every 400ms, the third every 600ms.
     35           *
     36           * The LED flash tasks provide instant visual feedback.  They show that the scheduler
     37           * is still operational.
     38           *
     39           */
     40          
     41          
     42          #include <stdlib.h>
     43          
     44          /* Scheduler include files. */
     45          #include "FreeRTOS.h"
     46          #include "task.h"
     47          
     48          /* Demo program include files. */
     49          #include "partest.h"
     50          #include "flash.h"
     51          
     52          #define ledSTACK_SIZE		configMINIMAL_STACK_SIZE
     53          #define ledNUMBER_OF_LEDS	( 3 )
     54          #define ledFLASH_RATE_BASE	( ( TickType_t ) 333 )
     55          
     56          /* Variable used by the created tasks to calculate the LED number to use, and
     57          the rate at which they should flash the LED. */
     58          static volatile UBaseType_t uxFlashTaskNumber = 0;
     59          
     60          /* The task that is created three times. */
     61          static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );
     62          
     63          /*-----------------------------------------------------------*/
     64          
     65          void vStartLEDFlashTasks( UBaseType_t uxPriority )
     66          {
     67          BaseType_t xLEDTask;
     68          
     69          	/* Create the three tasks. */
     70          	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
     71          	{
     72          		/* Spawn the task. */
     73          		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
     74          	}
     75          }
     76          /*-----------------------------------------------------------*/
     77          
     78          static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
     79          {
     80          TickType_t xFlashRate, xLastFlashTime;
     81          UBaseType_t uxLED;
     82          
     83          	/* The parameters are not used. */
     84          	( void ) pvParameters;
     85          
     86          	/* Calculate the LED and flash rate. */
     87          	portENTER_CRITICAL();
     88          	{
     89          		/* See which of the eight LED's we should use. */
     90          		uxLED = uxFlashTaskNumber;
     91          
     92          		/* Update so the next task uses the next LED. */
     93          		uxFlashTaskNumber++;
     94          	}
     95          	portEXIT_CRITICAL();
     96          
     97          	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
     98          	xFlashRate /= portTICK_PERIOD_MS;
     99          
    100          	/* We will turn the LED on and off again in the delay period, so each
    101          	delay is only half the total period. */
    102          	xFlashRate /= ( TickType_t ) 2;
    103          
    104          	/* We need to initialise xLastFlashTime prior to the first call to
    105          	vTaskDelayUntil(). */
    106          	xLastFlashTime = xTaskGetTickCount();
    107          
    108          	for(;;)
    109          	{
    110          		/* Delay for half the flash period then turn the LED on. */
    111          		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
    112          		vParTestToggleLED( uxLED );
    113          
    114          		/* Delay for half the flash period then turn the LED off. */
    115          		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
    116          		vParTestToggleLED( uxLED );
    117          	}
    118          } /*lint !e715 !e818 !e830 Function definition must be standard for task creation. */
    119          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   vLEDFlashTask
        16   -> vParTestToggleLED
        16   -> vPortEnterCritical
        16   -> vPortExitCritical
        16   -> vTaskDelayUntil
        16   -> xTaskGetTickCount
      24   vStartLEDFlashTasks
        24   -> xTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       8  ?_0
       4  uxFlashTaskNumber
      80  vLEDFlashTask
      38  vStartLEDFlashTasks

 
   4 bytes in section .bss
   8 bytes in section .rodata
 126 bytes in section .text
 
 126 bytes of CODE  memory
   8 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
