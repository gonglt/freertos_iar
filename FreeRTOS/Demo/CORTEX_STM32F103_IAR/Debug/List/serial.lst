###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.4.12462/W32 for ARM       14/May/2018  20:56:16
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\serial\serial.c
#    Command line =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\serial\serial.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes
#    Locale       =  Chinese (Simplified)_People's Republic of China.936
#    List file    =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\serial.lst
#    Object file  =  
#        C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\serial.o
#
###############################################################################

C:\Users\gonglt\Downloads\FreeRTOSv10.0.1\FreeRTOS\Demo\CORTEX_STM32F103_IAR\serial\serial.c
      1          /*
      2           * FreeRTOS Kernel V10.0.1
      3           * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /*
     29          	BASIC INTERRUPT DRIVEN SERIAL PORT DRIVER FOR UART0.
     30          */
     31          
     32          /* Scheduler includes. */
     33          #include "FreeRTOS.h"
     34          #include "queue.h"
     35          #include "semphr.h"
     36          
     37          /* Library includes. */
     38          #include "stm32f10x_lib.h"
     39          
     40          /* Demo application includes. */
     41          #include "serial.h"
     42          /*-----------------------------------------------------------*/
     43          
     44          /* Misc defines. */
     45          #define serINVALID_QUEUE				( ( QueueHandle_t ) 0 )
     46          #define serNO_BLOCK						( ( TickType_t ) 0 )
     47          #define serTX_BLOCK_TIME				( 40 / portTICK_PERIOD_MS )
     48          
     49          /*-----------------------------------------------------------*/
     50          
     51          /* The queue used to hold received characters. */
     52          static QueueHandle_t xRxedChars;
     53          static QueueHandle_t xCharsForTx;
     54          
     55          /*-----------------------------------------------------------*/
     56          
     57          /* UART interrupt handler. */
     58          void vUARTInterruptHandler( void );
     59          
     60          /*-----------------------------------------------------------*/
     61          
     62          /*
     63           * See the serial2.h header file.
     64           */
     65          xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
     66          {
     67          xComPortHandle xReturn;
     68          USART_InitTypeDef USART_InitStructure;
     69          NVIC_InitTypeDef NVIC_InitStructure;
     70          GPIO_InitTypeDef GPIO_InitStructure;
     71          
     72          	/* Create the queues used to hold Rx/Tx characters. */
     73          	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     74          	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     75          	
     76          	/* If the queue/semaphore was created correctly then setup the serial port
     77          	hardware. */
     78          	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
     79          	{
     80          		/* Enable USART1 clock */
     81          		RCC_APB2PeriphClockCmd( RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE );	
     82          
     83          		/* Configure USART1 Rx (PA10) as input floating */
     84          		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     85          		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     86          		GPIO_Init( GPIOA, &GPIO_InitStructure );
     87          		
     88          		/* Configure USART1 Tx (PA9) as alternate function push-pull */
     89          		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
     90          		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     91          		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     92          		GPIO_Init( GPIOA, &GPIO_InitStructure );
     93          
     94          		USART_InitStructure.USART_BaudRate = ulWantedBaud;
     95          		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     96          		USART_InitStructure.USART_StopBits = USART_StopBits_1;
     97          		USART_InitStructure.USART_Parity = USART_Parity_No ;
     98          		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     99          		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    100          		USART_InitStructure.USART_Clock = USART_Clock_Disable;
    101          		USART_InitStructure.USART_CPOL = USART_CPOL_Low;
    102          		USART_InitStructure.USART_CPHA = USART_CPHA_2Edge;
    103          		USART_InitStructure.USART_LastBit = USART_LastBit_Disable;
    104          		
    105          		USART_Init( USART1, &USART_InitStructure );
    106          		
    107          		USART_ITConfig( USART1, USART_IT_RXNE, ENABLE );
    108          		
    109          		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
    110          		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_KERNEL_INTERRUPT_PRIORITY;
    111          		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    112          		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    113          		NVIC_Init( &NVIC_InitStructure );
    114          		
    115          		USART_Cmd( USART1, ENABLE );		
    116          	}
    117          	else
    118          	{
    119          		xReturn = ( xComPortHandle ) 0;
    120          	}
    121          
    122          	/* This demo file only supports a single port but we have to return
    123          	something to comply with the standard demo header file. */
    124          	return xReturn;
    125          }
    126          /*-----------------------------------------------------------*/
    127          
    128          signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, TickType_t xBlockTime )
    129          {
    130          	/* The port handle is not required as this driver only supports one port. */
    131          	( void ) pxPort;
    132          
    133          	/* Get the next character from the buffer.  Return false if no characters
    134          	are available, or arrive before xBlockTime expires. */
    135          	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
    136          	{
    137          		return pdTRUE;
    138          	}
    139          	else
    140          	{
    141          		return pdFALSE;
    142          	}
    143          }
    144          /*-----------------------------------------------------------*/
    145          
    146          void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
    147          {
    148          signed char *pxNext;
    149          
    150          	/* A couple of parameters that this port does not use. */
    151          	( void ) usStringLength;
    152          	( void ) pxPort;
    153          
    154          	/* NOTE: This implementation does not handle the queue being full as no
    155          	block time is used! */
    156          
    157          	/* The port handle is not required as this driver only supports UART1. */
    158          	( void ) pxPort;
    159          
    160          	/* Send each character in the string, one at a time. */
    161          	pxNext = ( signed char * ) pcString;
    162          	while( *pxNext )
    163          	{
    164          		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
    165          		pxNext++;
    166          	}
    167          }
    168          /*-----------------------------------------------------------*/
    169          
    170          signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
    171          {
    172          signed portBASE_TYPE xReturn;
    173          
    174          	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
    175          	{
    176          		xReturn = pdPASS;
    177          		USART_ITConfig( USART1, USART_IT_TXE, ENABLE );
    178          	}
    179          	else
    180          	{
    181          		xReturn = pdFAIL;
    182          	}
    183          
    184          	return xReturn;
    185          }
    186          /*-----------------------------------------------------------*/
    187          
    188          void vSerialClose( xComPortHandle xPort )
    189          {
    190          	/* Not supported as not required by the demo application. */
    191          }
    192          /*-----------------------------------------------------------*/
    193          
    194          void vUARTInterruptHandler( void )
    195          {
    196          portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    197          char cChar;
    198          
    199          	if( USART_GetITStatus( USART1, USART_IT_TXE ) == SET )
    200          	{
    201          		/* The interrupt was caused by the THR becoming empty.  Are there any
    202          		more characters to transmit? */
    203          		if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
    204          		{
    205          			/* A character was retrieved from the queue so can be sent to the
    206          			THR now. */
    207          			USART_SendData( USART1, cChar );
    208          		}
    209          		else
    210          		{
    211          			USART_ITConfig( USART1, USART_IT_TXE, DISABLE );		
    212          		}		
    213          	}
    214          	
    215          	if( USART_GetITStatus( USART1, USART_IT_RXNE ) == SET )
    216          	{
    217          		cChar = USART_ReceiveData( USART1 );
    218          		xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
    219          	}	
    220          	
    221          	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
    222          }
    223          
    224          
    225          
    226          
    227          
    228          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   vSerialClose
      16   vSerialPutString
        16   -> xSerialPutChar
      16   vUARTInterruptHandler
        16   -> USART_GetITStatus
        16   -> USART_ITConfig
        16   -> USART_ReceiveData
        16   -> USART_SendData
        16   -> xQueueGenericSendFromISR
        16   -> xQueueReceiveFromISR
       8   xSerialGetChar
         8   -> xQueueReceive
      48   xSerialPortInitMinimal
        48   -> GPIO_Init
        48   -> NVIC_Init
        48   -> RCC_APB2PeriphClockCmd
        48   -> USART_Cmd
        48   -> USART_ITConfig
        48   -> USART_Init
        48   -> xQueueGenericCreate
      16   xSerialPutChar
        16   -> USART_ITConfig
        16   -> xQueueGenericSend


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       2  vSerialClose
      32  vSerialPutString
     136  vUARTInterruptHandler
       4  xCharsForTx
       4  xRxedChars
      22  xSerialGetChar
     248  xSerialPortInitMinimal
      42  xSerialPutChar

 
   8 bytes in section .bss
 502 bytes in section .text
 
 502 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
